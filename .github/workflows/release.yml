name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      auto_tag:
        description: 'Automatically create and push tag'
        required: false
        default: true
        type: boolean

jobs:
  auto-tag:
    name: Auto Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.auto_tag == true
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Read version from VERSION file
            if [ -f "VERSION" ]; then
              VERSION=$(cat VERSION)
            else
              VERSION="1.0.0"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: [auto-tag]
    if: always() && (needs.auto-tag.result == 'success' || needs.auto-tag.result == 'skipped')
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: 386
            ext: .exe
          - os: linux
            arch: amd64
            ext: ''
          - os: linux
            arch: 386
            ext: ''
          - os: linux
            arch: arm64
            ext: ''
          - os: darwin
            arch: amd64
            ext: ''
          - os: darwin
            arch: arm64
            ext: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ needs.auto-tag.outputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o twig${{ matrix.ext }} main.go generator.go
          tar -czf twig-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz twig${{ matrix.ext }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: twig-${{ matrix.os }}-${{ matrix.arch }}
          path: twig-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [auto-tag, build]
    if: always() && (needs.auto-tag.result == 'success' || needs.auto-tag.result == 'skipped') && needs.build.result == 'success'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ needs.auto-tag.outputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: |
            twig-windows-amd64/twig-${{ steps.version.outputs.version }}-windows-amd64.tar.gz
            twig-windows-386/twig-${{ steps.version.outputs.version }}-windows-386.tar.gz
            twig-linux-amd64/twig-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
            twig-linux-386/twig-${{ steps.version.outputs.version }}-linux-386.tar.gz
            twig-linux-arm64/twig-${{ steps.version.outputs.version }}-linux-arm64.tar.gz
            twig-darwin-amd64/twig-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz
            twig-darwin-arm64/twig-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true 